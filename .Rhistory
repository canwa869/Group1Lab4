print(result, row.names = TRUE)
cat("Residual standard error:", S5, "on", X$degrees_of_freedom,"degrees of freedom")
}
data(iris)
mod_object <- linreg(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
summary(mod_object)
library(ggplot2)
plot.linreg <- function(X) {
# 获取残差和拟合值
residuals <- X$residuals
fitted <- X$fitted_values
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal()
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sqrt(X$residual_variance)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "Standardized residuals") +
theme_minimal()
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, scale_location_plot, ncol = 2)
}
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
setwd("C:/Users/0529y/Desktop/semester1/Advanced Programming in R/Git/lab04/lab00004")
library(ggplot2)
install.packages("gridExtra")
plot.linreg <- function(X) {
# 获取残差和拟合值
residuals <- X$residuals
fitted <- X$fitted_values
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal()
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sqrt(X$residual_variance)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "Standardized residuals") +
theme_minimal()
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, scale_location_plot, ncol = 2)
}
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 3,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal()
library(ggplot2)
install.packages("gridExtra")
plot.linreg <- function(X) {
# 获取残差和拟合值
residuals <- X$residuals
fitted <- X$fitted_values
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 3,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal()
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sqrt(X$residual_variance)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 3,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "Standardized residuals") +
theme_minimal()
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, scale_location_plot, ncol = 2)
}
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
install.packages("gridExtra")
library(ggplot2)
install.packages("gridExtra")
plot.linreg <- function(X) {
# 获取残差和拟合值
residuals <- X$residuals
fitted <- X$fitted_values
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 1,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal()
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sqrt(X$residual_variance)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 1,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "Standardized residuals") +
theme_minimal()
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, scale_location_plot, ncol = 2)
}
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
install.packages("gridExtra")
library(ggplot2)
# 使用 iris 数据集并拟合线性模型
mod_object <- lm(Petal.Length ~ Species, data = iris)
# 获取残差和拟合值
residuals <- resid(mod_object)
fitted_values <- fitted(mod_object)
# 创建 Residuals vs Fitted 图
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted_values, Residuals = residuals),
aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1, size = 2, color = "black") +  # 使用空心圆形状
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # 添加零线
labs(title = "Residuals vs Fitted",
x = "Fitted values",
y = "Residuals") +
theme_minimal()
# 显示图形
print(residuals_fitted_plot)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
library(ggplot2)
library(gridExtra)
# 假设linreg_mod是之前创建的线性回归模型对象
linreg_mod <- lm(Petal.Length ~ Species, data = iris)
# 获取残差和拟合值
residuals <- resid(linreg_mod)
fitted <- fitted(linreg_mod)
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dotted") +  # 线条为虚线
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal() +
ylim(-1.5, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sd(residuals)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "√|Standardized residuals|") +
theme_minimal() +
ylim(0, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, scale_location_plot, ncol = 2)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
library(ggplot2)
library(gridExtra)
# 假设linreg_mod是之前创建的线性回归模型对象
linreg_mod <- lm(Petal.Length ~ Species, data = iris)
# 获取残差和拟合值
residuals <- resid(linreg_mod)
fitted <- fitted(linreg_mod)
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dotted") +  # 线条为虚线
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal() +
ylim(-1.5, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sd(residuals)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "√|Standardized residuals|") +
theme_minimal() +
ylim(0, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, ncol = 1)
gridExtra::grid.arrange(scale_location_plot,ncol = 1)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
library(ggplot2)
library(gridExtra)
# 假设linreg_mod是之前创建的线性回归模型对象
linreg_mod <- lm(Petal.Length ~ Species, data = iris)
# 获取残差和拟合值
residuals <- resid(linreg_mod)
fitted <- fitted(linreg_mod)
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dotted") +  # 线条为虚线
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal() +
ylim(-1.5, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sd(residuals)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "√|Standardized residuals|") +
theme_minimal() +
ylim(0, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, ncol = 1)
gridExtra::grid.arrange(scale_location_plot,ncol = 1)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
library(ggplot2)
library(gridExtra)
# 假设linreg_mod是之前创建的线性回归模型对象
linreg_mod <- lm(Petal.Length ~ Species, data = iris)
# 获取残差和拟合值
residuals <- resid(linreg_mod)
fitted <- fitted(linreg_mod)
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal() +
ylim(-1.5, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sd(residuals)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "√|Standardized residuals|") +
theme_minimal() +
ylim(0, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, ncol = 1)
gridExtra::grid.arrange(scale_location_plot,ncol = 1)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
library(ggplot2)
library(gridExtra)
# 假设linreg_mod是之前创建的线性回归模型对象
linreg_mod <- lm(Petal.Length ~ Species, data = iris)
# 获取残差和拟合值
residuals <- resid(linreg_mod)
fitted <- fitted(linreg_mod)
# 1. Residuals vs Fitted Plot
residuals_fitted_plot <- ggplot(data = data.frame(Fitted = fitted, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_line(color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
theme_minimal() +
ylim(-1.5, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 2. Scale-Location Plot (Standardized Residuals vs Fitted)
std_residuals <- residuals / sd(residuals)  # 标准化残差
scale_location_plot <- ggplot(data = data.frame(Fitted = fitted, StdResiduals = std_residuals), aes(x = Fitted, y = abs(StdResiduals))) +
geom_point(shape = 1,  # 使用空心圆形状
size = 2,    # 点的大小
color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scale-Location", x = "Fitted values", y = "√|Standardized residuals|") +
theme_minimal() +
ylim(0, 1.5) +  # 设置y轴范围
xlim(2, 5)  # 设置x轴范围
# 显示两个图
gridExtra::grid.arrange(residuals_fitted_plot, ncol = 1)
gridExtra::grid.arrange(scale_location_plot,ncol = 1)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
devtools::build_vignettes()
setwd("C:/Users/0529y/Desktop/semester1/Advanced Programming in R/Git/lab04/lab00004")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
browseVignettes("lab00004")
setwd("C:/Users/0529y/Desktop/semester1/Advanced Programming in R/Git/lab04/lab00004")
browseVignettes("lab00004")
browseVignettes("[lab00004]")
.rs.restartR()
browseVignettes("lab00004")
find.package("lab00004")
library(lab00004)
install.packages("lab00004")
devtools::install("C:/Users/0529y/Desktop/semester1/Advanced Programming in R/Git/lab04/lab00004")
if (S4[i] < 0.001) {
result$Significance[i] <- "***"
} else if (S4[i] < 0.01) {
result$Significance[i] <- "**"
} else if (S4[i] < 0.05) {
result$Significance[i] <- "*"
} else {
result$Significance[i] <- ""
}
browseVignettes("lab00004")
setwd("C:/Users/0529y/Desktop/semester1/Advanced Programming in R/Git/lab04/lab00004")
browseVignettes("lab00004")
devtools::build_vignettes()
browseVignettes("lab00004")
.rs.restartR()
browseVignettes("lab00004")
devtools::install(build_vignettes = TRUE)
browseVignettes("lab00004"
browseVignettes("lab00004")
browseVignettes("lab00004")
library(ggplot2)
library(gridExtra)
fitted_values <- fitted(model)
linreg <- function(formula, data){
X <- model.matrix(formula, data)
y <- data[[all.vars(formula)[1]]]
# variables <- all.vars(formula)[-1]
name<- deparse(substitute(data))
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
y_hat <- X %*% beta_hat
e_hat <- y - y_hat
n <- nrow(X)
p <- ncol(X)
df <- n-p
sigma_square_hat <- as.numeric(t(e_hat) %*% e_hat / df)  #residual variance
Residual_standard_error <- sqrt(sigma_square_hat)
var_beta_hat <- sigma_square_hat * solve(t(X) %*% X)
standard_error <- sqrt(diag(var_beta_hat))
t_values <- beta_hat / (sqrt(diag(var_beta_hat)))
p_values <- 2 * pt(-abs(t_values), df)
qr_decomp <- qr(X)
Q <- qr.Q(qr_decomp)
R <- qr.R(qr_decomp)
beta_hat1 <- solve(R) %*% t(Q) %*% y  #regression coefficient
var_beta_hat1 <- sigma_square_hat * solve(t(R) %*% R)  #variance of regression coefficient
result <- list(
coefficients = beta_hat,
fitted_values = y_hat,
residuals = e_hat,
degrees_of_freedom = df,
residual_variance = sigma_square_hat,
variance_coefficients = var_beta_hat,
t_values = t_values,
p_values = p_values,
coefficients1 = beta_hat1,
variance_coefficients1 = var_beta_hat1,
formula = formula,
data = data,
name = name,
standard_error = standard_error,
Residual_standard_error = Residual_standard_error
)
class(result) <- "linreg"
re
linreg <- function(formula, data){
X <- model.matrix(formula, data)
y <- data[[all.vars(formula)[1]]]
# variables <- all.vars(formula)[-1]
name<- deparse(substitute(data))
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
y_hat <- X %*% beta_hat
e_hat <- y - y_hat
n <- nrow(X)
p <- ncol(X)
df <- n-p
sigma_square_hat <- as.numeric(t(e_hat) %*% e_hat / df)  #residual variance
Residual_standard_error <- sqrt(sigma_square_hat)
var_beta_hat <- sigma_square_hat * solve(t(X) %*% X)
standard_error <- sqrt(diag(var_beta_hat))
t_values <- beta_hat / (sqrt(diag(var_beta_hat)))
p_values <- 2 * pt(-abs(t_values), df)
qr_decomp <- qr(X)
Q <- qr.Q(qr_decomp)
R <- qr.R(qr_decomp)
beta_hat1 <- solve(R) %*% t(Q) %*% y  #regression coefficient
var_beta_hat1 <- sigma_square_hat * solve(t(R) %*% R)  #variance of regression coefficient
result <- list(
coefficients = beta_hat,
fitted_values = y_hat,
residuals = e_hat,
degrees_of_freedom = df,
residual_variance = sigma_square_hat,
variance_coefficients = var_beta_hat,
t_values = t_values,
p_values = p_values,
coefficients1 = beta_hat1,
variance_coefficients1 = var_beta_hat1,
formula = formula,
data = data,
name = name,
standard_error = standard_error,
Residual_standard_error = Residual_standard_error
)
class(result) <- "linreg"
return(result)
}
fitted_values <- fitted(model)
residuals <- residuals(model)
std_residuals <- rstandard(model)
# 创建数据框以便 ggplot 使用
plot_data <- data.frame(fitted_values, residuals, std_residuals)
# Residuals vs Fitted Plot
p1 <- ggplot(plot_data, aes(x = fitted_values, y = residuals)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", linetype = "dotted") +
labs(x = "Fitted values\nlm(Petal.Length ~ Species)",
y = "Residuals", title = "Residuals vs Fitted") +
theme_minimal()
print(p1)
# Scale-Location Plot
p2 <- ggplot(plot_data, aes(x = fitted_values, y = sqrt(abs(std_residuals)))) +
geom_point() +
geom_smooth(se = FALSE, color = "red", linetype = "dotted") +
labs(x = "Fitted values\nlm(Petal.Length ~ Species)",
y = expression(sqrt("Standardized residuals")), title = "Scale-Location") +
theme_minimal()
print(p2)
grid.arrange(p1, p2, ncol = 1)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
fitted_values <- fitted(model)
residuals <- residuals(model)
std_residuals <- rstandard(model)
# 创建数据框以便 ggplot 使用
plot_data <- data.frame(fitted_values, residuals, std_residuals)
# Residuals vs Fitted Plot
p1 <- ggplot(plot_data, aes(x = fitted_values, y = residuals)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", linetype = "dotted") +
labs(x = "Fitted values\nlm(Petal.Length ~ Species)",
y = "Residuals", title = "Residuals vs Fitted") +
theme_minimal()
print(p1)
# Scale-Location Plot
p2 <- ggplot(plot_data, aes(x = fitted_values, y = sqrt(abs(std_residuals)))) +
geom_point() +
geom_smooth(se = FALSE, color = "red", linetype = "dotted") +
labs(x = "Fitted values\nlm(Petal.Length ~ Species)",
y = expression(sqrt("Standardized residuals")), title = "Scale-Location") +
theme_minimal()
print(p2)
# 使用 gridExtra 包显示两个图形
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
grid.arrange(p1, p2, ncol = 1)
linreg_mod <- lm(Petal.Length ~ Species, data = iris)
fitted_values <- fitted(model)
residuals <- residuals(model)
std_residuals <- rstandard(model)
plot_data <- data.frame(fitted_values, residuals, std_residuals)
p1 <- ggplot(plot_data, aes(x = fitted_values, y = residuals)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", linetype = "dotted") +
labs(x = "Fitted values\nlm(Petal.Length ~ Species)",
y = "Residuals", title = "Residuals vs Fitted") +
theme_minimal()
print(p1)
p2 <- ggplot(plot_data, aes(x = fitted_values, y = sqrt(abs(std_residuals)))) +
geom_point() +
geom_smooth(se = FALSE, color = "red", linetype = "dotted") +
labs(x = "Fitted values\nlm(Petal.Length ~ Species)",
y = expression(sqrt("Standardized residuals")), title = "Scale-Location") +
theme_minimal()
print(p2)
data(iris)
mod_object <- linreg(Petal.Length~Species, data = iris)
plot(mod_object)
grid.arrange(p1, p2, ncol = 1)
dev.off()
